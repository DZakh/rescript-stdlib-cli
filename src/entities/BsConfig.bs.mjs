// Generated by ReScript, PLEASE EDIT WITH CARE

import * as ModuleName from "./ModuleName.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Stdlib_Option from "@dzakh/rescript-stdlib/src/Stdlib_Option.bs.mjs";
import * as S$RescriptStruct from "rescript-struct/src/S.bs.mjs";

function getGlobalyOpenedModulesSet(bsConfig) {
  var set = new Set();
  bsConfig.bscFlags.forEach(function (bscFlag) {
        Stdlib_Option.forEach(ModuleName.fromBscFlag(bscFlag), (function (moduleName) {
                set.add(moduleName);
              }));
      });
  return set;
}

function hasGloballyOpenedModule(bsConfig, moduleName) {
  var globalyOpenedModulesSet = getGlobalyOpenedModulesSet(bsConfig);
  return globalyOpenedModulesSet.has(moduleName);
}

function lint(bsConfig, prohibitedModuleNames) {
  var globalyOpenedModulesSet = getGlobalyOpenedModulesSet(bsConfig);
  var maybeOpenedProhibitedModule = prohibitedModuleNames.find(function (prohibitedModule) {
        return globalyOpenedModulesSet.has(prohibitedModule);
      });
  if (maybeOpenedProhibitedModule !== undefined) {
    return {
            TAG: /* Error */1,
            _0: {
              NAME: "HAS_OPENED_PROHIBITED_MODULE",
              VAL: Caml_option.valFromOption(maybeOpenedProhibitedModule)
            }
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: undefined
          };
  }
}

var struct = S$RescriptStruct.object(function (o) {
      return {
              bscFlags: S$RescriptStruct.field(o, "bsc-flags", S$RescriptStruct.$$default(S$RescriptStruct.option(S$RescriptStruct.array(S$RescriptStruct.string(undefined))), (function (param) {
                          return [];
                        })))
            };
    });

function fromJsonString(jsonString) {
  return S$RescriptStruct.Result.mapErrorToString(S$RescriptStruct.parseJsonWith(jsonString, struct));
}

function make(bscFlags) {
  return {
          bscFlags: bscFlags
        };
}

var TestData = {
  make: make
};

export {
  lint ,
  hasGloballyOpenedModule ,
  fromJsonString ,
  TestData ,
}
/* struct Not a pure module */
