// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "rescript-struct/src/S.mjs";

function getGlobalyOpenedModules(bsConfig) {
  return bsConfig.bscFlags.filter(function (bscFlag) {
                return bscFlag.includes("-open");
              }).map(function (bscFlag) {
              return bscFlag.replace("-open", "").trim().split(".")[0];
            });
}

function lint(bsConfig, prohibitedModules) {
  var globalyOpenedModules = getGlobalyOpenedModules(bsConfig);
  var maybeOpenedProhibitedModule = prohibitedModules.find(function (prohibitedModule) {
        return globalyOpenedModules.some(function (globalyOpenedModule) {
                    return globalyOpenedModule === prohibitedModule;
                  });
      });
  if (maybeOpenedProhibitedModule !== undefined) {
    return {
            TAG: /* Error */1,
            _0: {
              NAME: "HAS_OPENED_PROHIBITED_MODULE",
              VAL: maybeOpenedProhibitedModule
            }
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: undefined
          };
  }
}

var struct = S.transform(S.object1([
          "bsc-flags",
          S.defaulted(S.option(S.array(S.string(undefined))), [])
        ]), (function (bscFlags) {
        return {
                bscFlags: bscFlags
              };
      }), undefined, undefined);

export {
  lint ,
  struct ,
}
/* struct Not a pure module */
