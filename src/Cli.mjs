// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "rescript-struct/src/S.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Process from "process";
import Minimist from "minimist";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Lib$RescriptStdlibCli from "./Lib.mjs";

function make(runLintCommand, runHelpCommand, runLintHelpCommand) {
  return function () {
    var commandArguments = Process.argv.slice(2);
    var result = Lib$RescriptStdlibCli.Result.mapError(S.parseWith(Minimist(commandArguments), S.union([
                  S.transform(S.$$Object.strict(S.object1([
                                "_",
                                S.union([
                                      S.tuple0(),
                                      S.tuple1(S.literalVariant({
                                                TAG: /* String */0,
                                                _0: "help"
                                              }, undefined))
                                    ])
                              ])), (function (param) {
                          return /* Help */0;
                        }), undefined, undefined),
                  S.transform(S.$$Object.strict(S.object1([
                                "_",
                                S.tuple2(S.literalVariant({
                                          TAG: /* String */0,
                                          _0: "help"
                                        }, undefined), S.literalVariant({
                                          TAG: /* String */0,
                                          _0: "lint"
                                        }, undefined))
                              ])), (function (param) {
                          return /* LintHelp */2;
                        }), undefined, undefined),
                  S.transform(S.$$Object.strict(S.object1([
                                "_",
                                S.tuple1(S.literalVariant({
                                          TAG: /* String */0,
                                          _0: "lint"
                                        }, undefined))
                              ])), (function (param) {
                          return /* Lint */1;
                        }), undefined, undefined)
                ])), (function (error) {
            var unionErrors = error.code;
            if (typeof unionErrors === "number") {
              return Js_exn.raiseError("Parsed error always must have the InvalidUnion code");
            }
            if (unionErrors.TAG !== /* InvalidUnion */5) {
              return Js_exn.raiseError("Parsed error always must have the InvalidUnion code");
            }
            var maybeIllegalOptionName = Belt_Option.map(Caml_option.undefined_to_opt(unionErrors._0.find(function (error) {
                          var match = error.code;
                          if (typeof match === "number" || match.TAG !== /* ExcessField */4) {
                            return false;
                          } else {
                            return true;
                          }
                        })), (function (excessFieldError) {
                    var illegalOptionName = excessFieldError.code;
                    if (typeof illegalOptionName === "number" || illegalOptionName.TAG !== /* ExcessField */4) {
                      return Js_exn.raiseError("The excessFieldError always must have the ExcessField code");
                    } else {
                      return illegalOptionName._0;
                    }
                  }));
            if (maybeIllegalOptionName !== undefined) {
              return /* IllegalOption */{
                      optionName: maybeIllegalOptionName
                    };
            } else {
              return /* CommandNotFound */0;
            }
          }));
    if (result.TAG === /* Ok */0) {
      switch (result._0) {
        case /* Help */0 :
            return runHelpCommand();
        case /* Lint */1 :
            return runLintCommand();
        case /* LintHelp */2 :
            return runLintHelpCommand();
        
      }
    } else {
      var error = result._0;
      if (error) {
        console.log("Illegal option:", error.optionName);
      } else {
        console.log("Command not found:", commandArguments.join(" "));
      }
      Process.exit(1);
      return ;
    }
  };
}

export {
  make ,
}
/* process Not a pure module */
