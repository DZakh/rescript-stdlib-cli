// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Config from "../entities/Config.bs.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Process from "process";
import Minimist from "minimist";
import * as Core__Option from "@dzakh/rescript-core/src/Core__Option.bs.mjs";
import * as Core__Result from "@dzakh/rescript-core/src/Core__Result.bs.mjs";
import * as S$RescriptStruct from "rescript-struct/src/S.bs.mjs";

function make(runLintCommand, runHelpCommand, runHelpLintCommand, exitConsoleWithError) {
  return function () {
    var commandArguments = Process.argv.slice(2);
    var result = Core__Result.map(Core__Result.mapError(S$RescriptStruct.parseWith(Minimist(commandArguments), S$RescriptStruct.union([
                      S$RescriptStruct.$$Object.strict(S$RescriptStruct.object(function (s) {
                                s.t("_", []);
                                return "Help";
                              })),
                      S$RescriptStruct.$$Object.strict(S$RescriptStruct.object(function (s) {
                                s.t("_", ["help"]);
                                return "Help";
                              })),
                      S$RescriptStruct.$$Object.strict(S$RescriptStruct.object(function (s) {
                                s.t("_", [
                                      "help",
                                      "lint"
                                    ]);
                                return "LintHelp";
                              })),
                      S$RescriptStruct.$$Object.strict(S$RescriptStruct.object(function (s) {
                                s.t("_", ["lint"]);
                                return {
                                        TAG: "Lint",
                                        _0: Config.make(s.f("project-path", S$RescriptStruct.$$Option.getOrWith(S$RescriptStruct.option(S$RescriptStruct.string), (function () {
                                                        return Process.cwd();
                                                      }))), s.o("ignore-without-stdlib-open", S$RescriptStruct.bool, false), s.o("ignore-path", S$RescriptStruct.union([
                                                      S$RescriptStruct.variant(S$RescriptStruct.string, (function (s) {
                                                              return [s];
                                                            })),
                                                      S$RescriptStruct.array(S$RescriptStruct.string)
                                                    ]), []))
                                      };
                              }))
                    ])), (function (error) {
                var unionErrors = error.code;
                if (typeof unionErrors !== "object") {
                  return Js_exn.raiseError("Parsed error always must have the InvalidUnion code");
                }
                if (unionErrors.TAG !== "InvalidUnion") {
                  return Js_exn.raiseError("Parsed error always must have the InvalidUnion code");
                }
                var maybeIllegalOptionName = Core__Option.map(unionErrors._0.find(function (error) {
                          var match = error.code;
                          if (typeof match !== "object" || match.TAG !== "ExcessField") {
                            return false;
                          } else {
                            return true;
                          }
                        }), (function (excessFieldError) {
                        var illegalOptionName = excessFieldError.code;
                        if (typeof illegalOptionName !== "object" || illegalOptionName.TAG !== "ExcessField") {
                          return Js_exn.raiseError("The excessFieldError always must have the ExcessField code");
                        } else {
                          return illegalOptionName._0;
                        }
                      }));
                if (maybeIllegalOptionName !== undefined) {
                  return {
                          TAG: "IllegalOption",
                          optionName: maybeIllegalOptionName
                        };
                } else {
                  return "CommandNotFound";
                }
              })), (function (command) {
            if (typeof command !== "object") {
              if (command === "Help") {
                return runHelpCommand();
              } else {
                return runHelpLintCommand();
              }
            } else {
              return runLintCommand(command._0);
            }
          }));
    if (result.TAG === "Ok") {
      return ;
    }
    var error = result._0;
    if (typeof error !== "object") {
      return exitConsoleWithError("Command not found: " + commandArguments.join(" "));
    } else {
      return exitConsoleWithError("Illegal option: " + error.optionName);
    }
  };
}

export {
  make ,
}
/* Config Not a pure module */
