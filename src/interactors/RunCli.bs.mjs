// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Config from "../entities/Config.bs.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Process from "process";
import Minimist from "minimist";
import * as Stdlib_Option from "@dzakh/rescript-stdlib/src/Stdlib_Option.bs.mjs";
import * as Stdlib_Result from "@dzakh/rescript-stdlib/src/Stdlib_Result.bs.mjs";
import * as S$RescriptStruct from "rescript-struct/src/S.bs.mjs";

function make(runLintCommand, runHelpCommand, runHelpLintCommand, exitConsoleWithError) {
  return function () {
    var commandArguments = Process.argv.slice(2);
    var result = Stdlib_Result.map(Stdlib_Result.mapError(S$RescriptStruct.parseWith(Minimist(commandArguments), S$RescriptStruct.union([
                      S$RescriptStruct.$$Object.strict(S$RescriptStruct.object(function (o) {
                                S$RescriptStruct.field(o, "_", S$RescriptStruct.union([
                                          S$RescriptStruct.tuple0(),
                                          S$RescriptStruct.tuple1(S$RescriptStruct.literalVariant({
                                                    TAG: /* String */0,
                                                    _0: "help"
                                                  }, undefined))
                                        ]));
                                return /* Help */0;
                              })),
                      S$RescriptStruct.$$Object.strict(S$RescriptStruct.object(function (o) {
                                S$RescriptStruct.field(o, "_", S$RescriptStruct.tuple2(S$RescriptStruct.literal({
                                              TAG: /* String */0,
                                              _0: "help"
                                            }), S$RescriptStruct.literal({
                                              TAG: /* String */0,
                                              _0: "lint"
                                            })));
                                return /* LintHelp */1;
                              })),
                      S$RescriptStruct.$$Object.strict(S$RescriptStruct.object(function (o) {
                                S$RescriptStruct.field(o, "_", S$RescriptStruct.tuple1(S$RescriptStruct.literal({
                                              TAG: /* String */0,
                                              _0: "lint"
                                            })));
                                return /* Lint */{
                                        _0: Config.make(S$RescriptStruct.field(o, "project-path", S$RescriptStruct.$$default(S$RescriptStruct.option(S$RescriptStruct.string(undefined)), (function (param) {
                                                        return Process.cwd();
                                                      }))), S$RescriptStruct.field(o, "ignore-without-stdlib-open", S$RescriptStruct.$$default(S$RescriptStruct.option(S$RescriptStruct.bool(undefined)), (function (param) {
                                                        return false;
                                                      }))), S$RescriptStruct.field(o, "ignore-path", S$RescriptStruct.$$default(S$RescriptStruct.option(S$RescriptStruct.union([
                                                              S$RescriptStruct.transform(S$RescriptStruct.string(undefined), (function (s) {
                                                                      return [s];
                                                                    }), undefined, undefined, undefined),
                                                              S$RescriptStruct.array(S$RescriptStruct.string(undefined))
                                                            ])), (function (param) {
                                                        return [];
                                                      }))))
                                      };
                              }))
                    ])), (function (error) {
                var unionErrors = error.code;
                if (typeof unionErrors === "number") {
                  return Js_exn.raiseError("Parsed error always must have the InvalidUnion code");
                }
                if (unionErrors.TAG !== /* InvalidUnion */5) {
                  return Js_exn.raiseError("Parsed error always must have the InvalidUnion code");
                }
                var maybeIllegalOptionName = Stdlib_Option.map(unionErrors._0.find(function (error) {
                          var match = error.code;
                          if (typeof match === "number" || match.TAG !== /* ExcessField */4) {
                            return false;
                          } else {
                            return true;
                          }
                        }), (function (excessFieldError) {
                        var illegalOptionName = excessFieldError.code;
                        if (typeof illegalOptionName === "number" || illegalOptionName.TAG !== /* ExcessField */4) {
                          return Js_exn.raiseError("The excessFieldError always must have the ExcessField code");
                        } else {
                          return illegalOptionName._0;
                        }
                      }));
                if (maybeIllegalOptionName !== undefined) {
                  return /* IllegalOption */{
                          optionName: maybeIllegalOptionName
                        };
                } else {
                  return /* CommandNotFound */0;
                }
              })), (function (command) {
            if (typeof command === "number") {
              if (command !== 0) {
                return runHelpLintCommand();
              } else {
                return runHelpCommand();
              }
            } else {
              return runLintCommand(command._0);
            }
          }));
    if (result.TAG === /* Ok */0) {
      return ;
    }
    var error = result._0;
    if (error) {
      return exitConsoleWithError("Illegal option: " + error.optionName + "");
    } else {
      return exitConsoleWithError("Command not found: " + commandArguments.join(" ") + "");
    }
  };
}

export {
  make ,
}
/* Config Not a pure module */
