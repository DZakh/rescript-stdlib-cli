// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as ResFile from "../entities/ResFile.bs.mjs";
import * as BsConfig from "../entities/BsConfig.bs.mjs";
import * as ModuleName from "../entities/ModuleName.bs.mjs";
import * as SourceDirs from "../entities/SourceDirs.bs.mjs";
import * as LintContext from "../entities/LintContext.bs.mjs";
import * as Stdlib_Result from "stdlib/src/Stdlib_Result.bs.mjs";

function make(projectPath, loadBsConfig, loadSourceDirs) {
  return function () {
    return Stdlib_Result.flatMap(Stdlib_Result.flatMap(Stdlib_Result.flatMap(Stdlib_Result.mapError(loadBsConfig(), (function (loadBsConfigError) {
                              return {
                                      TAG: /* BsConfigParseFailure */0,
                                      _0: loadBsConfigError._0
                                    };
                            })), (function (bsConfig) {
                          return Stdlib_Result.mapError(BsConfig.lint(bsConfig, ModuleName.defaultProhibitedModuleNames), (function (error) {
                                        return {
                                                TAG: /* BsConfigHasOpenedProhibitedModule */2,
                                                _0: error.VAL
                                              };
                                      }));
                        })), (function (param) {
                      return Stdlib_Result.mapError(loadSourceDirs(), (function (loadSourceDirsError) {
                                    if (loadSourceDirsError) {
                                      return {
                                              TAG: /* SourceDirsParseFailure */1,
                                              _0: loadSourceDirsError._0
                                            };
                                    } else {
                                      return /* RescriptCompilerArtifactsNotFound */0;
                                    }
                                  }));
                    })), (function (sourceDirs) {
                  var resFiles = SourceDirs.getProjectDirs(sourceDirs).flatMap(function (sourceDir) {
                        var fullDirPath = Path.resolve(projectPath, sourceDir);
                        return Fs.readdirSync(fullDirPath).filter(ResFile.checkIsResFile).map(function (dirItem) {
                                    var resFilePath = "" + fullDirPath + "/" + dirItem + "";
                                    return ResFile.make(Fs.readFileSync(resFilePath, {
                                                      encoding: "utf8"
                                                    }).toString(), resFilePath);
                                  });
                      });
                  var lintContext = LintContext.make(undefined);
                  resFiles.forEach(function (resFile) {
                        ResFile.lint(resFile, lintContext, ModuleName.defaultProhibitedModuleNames, ModuleName.defaultStdlibModuleName);
                      });
                  var lintIssues = LintContext.getIssues(lintContext);
                  if (lintIssues.length !== 0) {
                    return {
                            TAG: /* Error */1,
                            _0: {
                              TAG: /* LintFailedWithIssues */3,
                              _0: lintIssues
                            }
                          };
                  } else {
                    return {
                            TAG: /* Ok */0,
                            _0: undefined
                          };
                  }
                }));
  };
}

export {
  make ,
}
/* fs Not a pure module */
