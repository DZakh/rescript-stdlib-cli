// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Config from "../entities/Config.bs.mjs";
import * as Stdlib from "@dzakh/rescript-stdlib/src/Stdlib.bs.mjs";
import * as ResFile from "../entities/ResFile.bs.mjs";
import * as BsConfig from "../entities/BsConfig.bs.mjs";
import * as ModuleName from "../entities/ModuleName.bs.mjs";
import * as SourceDirs from "../entities/SourceDirs.bs.mjs";
import * as LintContext from "../entities/LintContext.bs.mjs";

function make(loadBsConfig, loadSourceDirs) {
  return function (config) {
    return Stdlib.Result.flatMap(Stdlib.Result.flatMap(Stdlib.Result.flatMap(Stdlib.Result.mapError(loadBsConfig(config), (function (loadBsConfigError) {
                              return {
                                      TAG: "BsConfigParseFailure",
                                      _0: loadBsConfigError._0
                                    };
                            })), (function (bsConfig) {
                          var match = BsConfig.lint(bsConfig, ModuleName.defaultProhibitedModuleNames);
                          if (match.TAG === "Ok") {
                            return {
                                    TAG: "Ok",
                                    _0: bsConfig
                                  };
                          } else {
                            return {
                                    TAG: "Error",
                                    _0: {
                                      TAG: "BsConfigHasOpenedProhibitedModule",
                                      _0: match._0.VAL
                                    }
                                  };
                          }
                        })), (function (bsConfig) {
                      var sourceDirs = loadSourceDirs(config);
                      if (sourceDirs.TAG === "Ok") {
                        return {
                                TAG: "Ok",
                                _0: [
                                  bsConfig,
                                  sourceDirs._0
                                ]
                              };
                      }
                      var loadSourceDirsError = sourceDirs._0;
                      var tmp;
                      tmp = typeof loadSourceDirsError !== "object" ? "RescriptCompilerArtifactsNotFound" : ({
                            TAG: "SourceDirsParseFailure",
                            _0: loadSourceDirsError._0
                          });
                      return {
                              TAG: "Error",
                              _0: tmp
                            };
                    })), (function (param) {
                  var bsConfig = param[0];
                  var resFiles = [];
                  SourceDirs.getProjectDirs(param[1]).forEach(function (sourceDir) {
                        var fullDirPath = Path.resolve(Config.getProjectPath(config), sourceDir);
                        Fs.readdirSync(fullDirPath).forEach(function (dirItem) {
                              if (!(ResFile.checkIsResFile(dirItem) && !Config.checkIsIgnoredPath(config, sourceDir + "/" + dirItem))) {
                                return ;
                              }
                              var resFilePath = fullDirPath + "/" + dirItem;
                              var resFile = ResFile.make(Fs.readFileSync(resFilePath, {
                                          encoding: "utf8"
                                        }).toString(), resFilePath);
                              resFiles.push(resFile);
                            });
                      });
                  var lintContext = LintContext.make(undefined);
                  resFiles.forEach(function (resFile) {
                        ResFile.lint(resFile, lintContext, ModuleName.defaultProhibitedModuleNames, Config.getStdlibModuleName(config), Config.checkShouldIngoreResFileIssuesBeforeStdlibOpen(config, bsConfig));
                      });
                  var lintIssues = LintContext.getIssues(lintContext);
                  if (lintIssues.length !== 0) {
                    return {
                            TAG: "Error",
                            _0: {
                              TAG: "LintFailedWithIssues",
                              _0: lintIssues
                            }
                          };
                  } else {
                    return {
                            TAG: "Ok",
                            _0: undefined
                          };
                  }
                }));
  };
}

export {
  make ,
}
/* fs Not a pure module */
